services:
  socket-server:
    build:
      context: ./server/socket-server
      dockerfile: Dockerfile
    ports:
      - "${SOCKET_SERVER_PORT}"
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - MONGO_URI=${MONGODB_URI}
      - PORT=${SOCKET_SERVER_PORT}
    deploy:
      replicas: ${SOCKET_REPLICAS}
    networks:
      - app-network

  backend-server:
    build:
      context: ./server/backend-server
      dockerfile: Dockerfile
    ports:
      - "${BACKEND_SERVER_PORT}"
    environment:
      - NODE_ENV=production
      - PORT=${BACKEND_SERVER_PORT}
      - MONGO_PORT=${MONGODB_PORT}
      - MONGO_URI=${MONGODB_URI}
      - NGINX_PORT=${NGINX_PORT}
    networks:
      - app-network
    deploy:
      replicas: ${BACKEND_REPLICAS}

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT}"
    networks:
      - app-network
    depends_on:
      - socket-server
    deploy:
      replicas: ${FRONTEND_REPLICAS}

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - "${NGINX_PORT:-4000}:${NGINX_PORT:-4000}"
    environment:
      - SOCKET_SERVER_PORT=${SOCKET_SERVER_PORT}
      - BACKEND_SERVER_PORT=${BACKEND_SERVER_PORT}
      - FRONTEND_PORT=${FRONTEND_PORT}
      - NGINX_PORT=${NGINX_PORT}
      - REDIS_PORT=${REDIS_PORT}
      - MONGODB_PORT=${MONGODB_PORT}
    networks:
      - app-network
    depends_on:
      - socket-server
      - backend-server
      - frontend

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - app-network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "${MONGODB_PORT}:${MONGODB_PORT}"
    networks:
      - app-network
    volumes:
      - mongo-data:/data/db
    command: ["mongod", "--logpath", "/dev/null"] # prevent mongodb from spamming the terminal

networks:
  app-network:
    driver: bridge

volumes:
  mongo-data:
    driver: local
