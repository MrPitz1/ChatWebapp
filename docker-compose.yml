services:
  socket-server:
    build:
      context: ./server/socket-server
      dockerfile: Dockerfile
    ports:
      - "5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_URI=mongodb://mongodb:27017/myDatabase
    deploy:
      replicas: 3
    networks:
      - app-network

  backend-server:
    build:
      context: ./server/backend-server
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=7000
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_URI=mongodb://mongodb:27017/myDatabase
    networks:
      - app-network
    deploy:
      replicas: 3

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "3000"
    networks:
      - app-network
    depends_on:
      - socket-server
    deploy:
      replicas: 3

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "4000:4000"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - app-network
    depends_on:
      - socket-server
      - backend-server
      - frontend

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379"
    networks:
      - app-network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    networks:
      - app-network
    volumes:
      - mongo-data:/data/db
    command: ["mongod", "--logpath", "/dev/null"] # prevent mongodb to spam the terminal
networks:
  app-network:
    driver: bridge

volumes:
  mongo-data:
    driver: local
