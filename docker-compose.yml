version: '3.8'

services:
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=example_db
      - DB_USER=example_user
      - DB_PASSWORD=example_password
    deploy:
      replicas: 3
    networks:
      - app-network

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      - backend

  haproxy:
    image: haproxy:latest
    container_name: haproxy
    ports:
      - "4000:4000"
    volumes:
      - ./HAProxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    networks:
      - app-network
    depends_on:
      - backend

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379"
    networks:
      - app-network

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: example_root_password
      MYSQL_DATABASE: example_db
      MYSQL_USER: example_user
      MYSQL_PASSWORD: example_password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mysql_data:
